@*@using Blazorise.Components
@using HQSOFT.Configuration.HQAssigments;
@using HQSOFT.Configuration.HQShares;
@using HQSOFT.Configuration.Users;
@using Volo.Abp.AspNetCore.Components.Messages;
@using Volo.Abp.BlazoriseUI.Components
@using global::HQSOFT.Configuration.Localization
@using global::HQSOFT.Configuration.Shared
@using Microsoft.AspNetCore.Authorization
@using Microsoft.Extensions.Localization
@using Microsoft.AspNetCore.Components.Web
@inherits ConfigurationComponentBase
@inject IHQAssigmentsAppService HQAssigmentsAppService
@inject IHQSharesAppService HQSharesAppService
@inject IUiMessageService UiMessageService
@inject IRemoteServiceConfigurationProvider RemoteServiceConfigurationProvider
@inject NavigationManager NavigationManager
@using HQSOFT.Configuration.HQTasks
@using Volo.Abp.Http.Client;*@
<Card>
    <CardBody>
        @*<Text>@Value</Text>*@
        <Icon Name="IconName.UserPlus" />
        <Text class="title">Assigned To</Text>
       @* <br />
        <button style="border-radius:50%;margin-top:10px; margin-bottom:10px">
            <Icon Name="IconName.PlusCircle" Style="color:black" />
        </button>
        <br />*@
        <Button Style="margin-top: 20px; width:100%" Outline>
            <Icon Name="IconName.PlusCircle"  />
        </Button>

        <Icon Name="IconName.Paperclip" />
        <Text class="title">Attachments</Text>

        <Button Size="Size.Small" Color="Color.Dark" Style="margin-top:10px; margin-bottom:10px; width:100%" Outline>
            Attach File  <Icon Name="IconName.PlusCircle" />
        </Button>

        <Icon Name="IconName.Star" />
        <Text class="title">Review</Text>
        <br />
        <button style="border-radius:50%; margin-top:10px;margin-bottom:10px">
            <Icon Name="IconName.PlusCircle" Style="color:black" />
        </button>
        @* <Button Color="Color.Dark" Style="margin-top: 20px; width:100%; border-radius=50%" Outline>
        <Icon Name="IconName.PlusCircle" />
        </Button>*@
        <br />
        <Icon Name="IconName.Share" />
        <Text class="title">Share With</Text>
       @* <br />
        <button style="border-radius:50%; margin-top:10px;margin-bottom:10px">
            <Icon Name="IconName.PlusCircle" Style="color:black" />
        </button>
        <br />*@
        <Button Color="Color.Dark" Style="margin-top: 20px; width:100%" Outline >
            <Icon Name="IconName.PlusCircle" />
        </Button>
        <Row Style="margin-top:100px"></Row>
        <Icon Name="IconName.Comment" />
        <Text Style="margin:10px">0</Text>
        <hr />
        <CardTitle Style="font-weight:bold">Edit History</CardTitle>
        <Row>
            <Text>You edited this 6 hours ago</Text>
            <Text>You created this 1 week ago</Text>
        </Row>

    </CardBody>
</Card>

@* ************************* CREATE MODAL ************************* *@
@*<Modal @ref="CreateHQAssigmentModal" Closing="@CreateHQAssigmentModal.CancelClosingModalWhenFocusLost">
    <ModalContent Centered="true">
        <Form id="CreateHQAssigmentForm">
            <ModalHeader>
                <ModalTitle>@L["Add Todo"]</ModalTitle>
                <CloseButton Clicked="CloseCreateHQAssigmentModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Tabs SelectedTab="@SelectedCreateTab" SelectedTabChanged="@OnSelectedCreateTabChanged">
                    <Items>
                        <Tab Name="hQAssigment-create-tab">@L["HQAssigment"].Value</Tab> 
                        <Tab Name="users-create-tab">@L["Users"].Value</Tab>
                    </Items>
                    <Content>
                <Validations @ref="@NewHQAssigmentValidations"
                            Mode="ValidationMode.Auto"
                            Model="@NewHQAssigment"
                            ValidateOnLoad="false">
                     <TabPanel Name="hQAssigment-create-tab">
                    
                    <Validation>
                        <Field>
                            <FieldLabel>@L["Completeby"]</FieldLabel>
                            <DateEdit TValue="DateTime" InputMode="DateInputMode.DateTime" @bind-Date="@NewHQAssigment.Completeby" >
                               <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </DateEdit>
                        </Field>
                    </Validation>


                    <Field>
                        <FieldLabel>@L["Priority"]</FieldLabel>
                        <Select TValue="PriorityAssign" @bind-SelectedValue="@NewHQAssigment.Priority" >
                            @foreach (var itemValue in Enum.GetValues(typeof(PriorityAssign)))
                            {
                                <SelectItem TValue="PriorityAssign" Value="@((PriorityAssign) itemValue)">
                                    @L[$"Enum:PriorityAssign.{((PriorityAssign) itemValue).ToString("d")}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>


                    <Validation>
                        <Field>
                            <FieldLabel>@L["Comment"]</FieldLabel>
                            <MemoEdit @bind-Text="@NewHQAssigment.Comment"  >
                                <Feedback>
                                    <ValidationError />
                                </Feedback>
                            </MemoEdit>
                        </Field>
                    </Validation>             
                    </TabPanel>
                            <TabPanel Name="users-create-tab">

                                <Row>
                                    <Column ColumnSize="ColumnSize.Is9">
                                        <Field>

                                            <Autocomplete Data="@Users"
                                                          TItem="LookupDto<Guid>"
                                                          TValue="string"
                                                          TextField="@((item) => item.DisplayName)"
                                                          ValueField="@((item) => item.Id.ToString())"
                                                          SearchChanged="@GetUserLookupAsync"
                                                          @bind-SelectedValue="@SelectedUserId"
                                                          @bind-SelectedText="@SelectedUserText"
                                                          Placeholder="&#8212;"/>
                                        </Field>
                                    </Column>

                                    <Column ColumnSize="ColumnSize.Is3">
                                        <Button Color="Color.Info" TextColor="TextColor.White" Size="Size.Small" Clicked="AddUser">
                                            <Icon class="fa fa-plus"></Icon> @L["Add"]
                                        </Button>
                                    </Column>
                                </Row>
                                @if (SelectedUsers.Any())
                                {
                                    <Table striped-rows="true" responsive-sm="true" class="mt-2">
                                        <TableHeader>
                                            <TableHeaderCell><Span class="float-start">@L["Email"]</Span></TableHeaderCell>
                                        </TableHeader>
                                        <TableBody>
                                            @foreach (var user in SelectedUsers)
                                            {
                                                <TableRow>
                                                    <TableRowCell><Span class="float-start">@user.DisplayName</Span></TableRowCell>
                                                    <TableRowCell>
                                                        <span class="btn btn-danger btn-sm float-end"
                                                              @onclick="() => SelectedUsers.RemoveAll(s => s.Id == user.Id)">
                                                            <Icon Class="fa fa-trash"></Icon>
                                                        </span>
                                                    </TableRowCell>
                                                </TableRow>
                                            }
                                        </TableBody>
                                    </Table>
                                }
                            </TabPanel>
                </Validations>
                    </Content>
                </Tabs>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateHQAssigmentModalAsync">
                    @L["Cancel"]
                </Button>
                <SubmitButton Form="CreateHQAssigmentForm" Clicked="CreateHQAssigmentAsync" />
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>
*@
<style>
    .title {
        margin-left: 10px;
    }
</style>
@code {
  
}